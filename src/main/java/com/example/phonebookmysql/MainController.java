package com.example.phonebookmysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    @CrossOrigin
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody User addNewUser (@RequestBody PhoneEntry phoneEntry) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        System.out.println("name: " + phoneEntry.getName());
        System.out.println("number: " + phoneEntry.getpNumber());
        System.out.println("favorite: " + phoneEntry.isFavorite());
        User n = new User();
        n.setName(phoneEntry.getName());
        n.setpNumber(phoneEntry.getpNumber());
        n.setFavorite(phoneEntry.isFavorite());
        return userRepository.save(n);

    }

    @CrossOrigin
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @CrossOrigin
    @GetMapping(path="/{id}")
    public @ResponseBody Optional<User> getUser(@PathVariable Integer id) {
        // This returns a JSON or XML with the users
        return userRepository.findById(id);
    }

    @CrossOrigin
    @DeleteMapping(path="/{id}")
    public @ResponseBody String deleteNumber(@PathVariable Integer id) {
        userRepository.deleteById(id);

//        if(!isRemoved)
//            return "delete failed";

        return "deleted";
    }

    @CrossOrigin
    @PutMapping(path="/{id}")
    public @ResponseBody Optional<User> updateFavorite(@PathVariable Integer id) {
        System.out.println("id in update = " + id);
        userRepository.findById(id)
                .map(user -> {
                    System.out.println("Inside lambda");
                    System.out.println("Fav: " + user.isFavorite());
                    user.setFavorite(!user.isFavorite());
                    System.out.println("Fav: " + user.isFavorite());
                    userRepository.save(user);
                    return userRepository.findById(id);
                });
        return userRepository.findById(id);
    }
}